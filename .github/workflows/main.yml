name: CI/CD Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  # -------------------------
  # Continuous Integration
  # -------------------------
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  # -------------------------
  # Build & Push Docker Image
  # -------------------------
  build-and-push-ecr-image:
    name: Build & Push Docker Image
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Debug ECR variables
        run: |
          echo "Registry: '${{ steps.login-ecr.outputs.registry }}'"
          echo "Repository: '${{ secrets.ECR_REPOSITORY_NAME }}'"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          # fallback to hardcoded registry if output is empty
          tags: ${{ steps.login-ecr.outputs.registry || '045400793826.dkr.ecr.us-east-1.amazonaws.com' }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        id: build-image

      - name: Set output image
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry || '045400793826.dkr.ecr.us-east-1.amazonaws.com' }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest" >> $GITHUB_OUTPUT

  # -------------------------
  # Continuous Deployment
  # -------------------------
  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest Docker image
        run: |
          docker pull ${{ steps.login-ecr.outputs.registry || '045400793826.dkr.ecr.us-east-1.amazonaws.com' }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Stop and remove old container
        run: |
          if docker ps -q --filter "name=networksecurity" | grep -q .; then
            docker stop networksecurity
            docker rm -fv networksecurity
          fi

      - name: Run Docker container
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity \
            -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "AWS_REGION=${{ secrets.AWS_REGION }}" \
            ${{ steps.login-ecr.outputs.registry || '045400793826.dkr.ecr.us-east-1.amazonaws.com' }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Clean unused Docker resources
        run: docker system prune -f
